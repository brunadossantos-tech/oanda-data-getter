tail(ema,n=3)
bb <-myBBands(Cl(data),n=20,sd=2)
tail(bb,n=5)
macd <- MACD(Cl(data), nFast=12, nSlow=26,
nSig=9, percent=FALSE)
tail(macd,n=5)
chartSeries(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('white'))
addMACD(fast=12,slow=26,signal=9,type="EMA")
rsi <- RSI(Cl(data), SMA, n=14)
tail(rsi,n=3)
myRSI <- function (price,n){
N <- length(price)
U <- rep(0,N)
D <- rep(0,N)
rsi <- rep(NA,N)
Lprice <- Lag(price,1)
for (i in 2:N){
if (price[i]>=Lprice[i]){
U[i] <- price[i]- Lprice[i]
} else{
D[i] <- Lprice[i]- price[i]
}
if (i>n){
AvgUp <- mean(U[(i-n+1):i])
AvgDn <- mean(D[(i-n+1):i])
rsi[i] <- AvgUp/(AvgUp+AvgDn)*100
}
}
rsi <- reclass(rsi, price)
return(rsi)
}
rsi <- myRSI(Cl(data), n=14)
tail(rsi,n=3)
chartSeries(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('white'))
addRSI(n=14,maType="SMA")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
barChart(data, theme = chartTheme('black'))
ema12 <-EMA(Cl(data),n=12)
ema26 <- EMA(CL(data), n=26)
Open <- Op(data)   #Open Price
High <- Hi(data)    # High price
Low <- Lo(data)  # Low price
Close<- Cl(data)   #Close Price
Volume <- Vo(data)
ema12 <-EMA(Cl(data),n=12)
ema26 <- EMA(CL(data), n=26)
bb <-myBBands(Cl(data),n=20,sd=2)
ema12 <-EMA(Cl(data),n=12)
ema26 <- EMA(Cl(data), n=26)
chartSeries(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('white'))
addEMA(n = 12, col = 'blue')
addEMA(n = 26, col = 'orange')
legend('left', col = c('green','blue','orange'),
legend = c('data','EMA12','EMA26'), lty = 1, bty = 'n',
text.col = 'white', cex = 0.8)
lineChart(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('white'))
addEMA(n = 12, col = 'blue')
addEMA(n = 26, col = 'orange')
legend('left', col = c('green','blue','orange'),
legend = c('data','EMA12','EMA26'), lty = 1, bty = 'n',
text.col = 'white', cex = 0.8)
candlestickChart(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('white'))
addEMA(n = 12, col = 'blue')
addEMA(n = 26, col = 'orange')
legend('left', col = c('green','blue','orange'),
legend = c('data','EMA12','EMA26'), lty = 1, bty = 'n',
text.col = 'white', cex = 0.8)
barChart(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('white'))
addEMA(n = 12, col = 'blue')
addEMA(n = 26, col = 'orange')
legend('left', col = c('green','blue','orange'),
legend = c('data','EMA12','EMA26'), lty = 1, bty = 'n',
text.col = 'white', cex = 0.8)
barChart(data,
subset='2021-01-03 22:00:00::2021-02-01 14:30:00',
theme=chartTheme('black'))
addEMA(n = 12, col = 'blue')
addEMA(n = 26, col = 'orange')
legend('left', col = c('green','blue','orange'),
legend = c('data','EMA12','EMA26'), lty = 1, bty = 'n',
text.col = 'white', cex = 0.8)
ema_EUR <- Lag(
ifelse(Lag(ema12) < Lag(ema26) & ema12 > ema26,1,
ifelse(Lag(ema12)>Lag(ema26)& ema12<ema26,-1,0)))
ema_EUR[is.na(ema_EUR)] <- 0
ema_EUR_strat <- ifelse(ema_EUR > 1,0,1)
for (i in 1: length(Cl(data))){
ema_EUR_strat[i] <- ifelse(ema_EUR[i] == 1,1,
ifelse(ema_EUR[i] == -1,0, ema_EUR_strat[i-1]))
}
ema_EUR_strat[is.na(ema_EUR_strat)] <-1
ema_EUR_stratcomp <- cbind(ema12, ema26, ema_EUR, ema_EUR_strat)
colnames(ema_EUR_stratcomp) <- c('EMA(12)', 'EMA(26)', 'EMA Signal', 'EMA Position')
View(ema_EUR_stratcomp)
View(ema_EUR_stratcomp)
install.packages("remotes")
remotes::install_github("braverock/quantstrat")
sessionInfo()
library(data.table)
install.packages("blotter")
install.packages("ggplot2")
library(FinancialInstrument)
install.packages("FinancialInstrument")
install.packages("FinancialInstrument")
library(FinancialInstrument)
library("blotter")
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2002-10-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2021-02-01')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2020-02-01')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2018-01-01', to='2018-02-01')
getSymbols("USD/EUR",src="oanda",from="2020-01-01")
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01')
head(GBPUSD)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2020-12-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01')
library("FinancialInstrument")
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2020-01-01')
? extdata
'??extdata'
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2002-10-31')
strategy(name="luxor", store=TRUE)
> strategy(name="luxor", store=TRUE)
strategy(name="luxor", store=TRUE)
GBPUSD=to.minutes30(GBPUSD)
GBPUSD=align.time(GBPUSD,1800)
head(GBPUSD)
?luxor
?strategy
require(quantstrat)
source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))
require('FinancialInstrument')
currency(c('GBP', 'USD'))
exchange_rate(primary_id = 'GBPUSD', tick_size = 0.0001)
data.dir <- '~/R.symbols'
.from <- '2015-01-01'
.to <- '2020-01-01'
getSymbols.FI(Symbols = 'GBPUSD',
dir = data.dir,
from=.from, to=.to)
getSymbols.FI(Symbols = 'GBPUSD',
dir=system.file('extdata', package = 'quantstrat'), from = .from, to=.to)
.from <- '2009-01-01'
.to <- '2019-01-01'
getSymbols.FI(Symbols = 'GBPUSD',
dir=system.file('extdata', package = 'quantstrat'), from = .from, to=.to)
.from <- '2020-01-01'
.to <- '2005-01-01'
getSymbols.FI(Symbols = 'GBPUSD',
dir=system.file('extdata', package = 'quantstrat'), from = .from, to=.to)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2002-01-01')
GBPUSD = to.minutes30(GBPUSD)
GBPUSD = align.time(GBPUSD, 1800)
head(GBPUSD)
strategy(name = 'luxor', store = TRUE)
head(GBPUSD)
add.indicator(
strategy = 'luxor',
name = 'SMA',
arguments = list(
x= quote(Cl(mkdata)[,1]),
n=19
),
label = 'nFast'
)
add.indicator(
strategy = 'luxor',
name = 'SMA',
arguments = list(
x= quote(Cl(mkdata)[,1]),
n=10
),
label = 'nFast'
)
add.indicator(
strategy = 'luxor',
name = 'SMA',
arguments = list(
x= quote(Cl(mkdata)[,1]),
n=30
),
label = 'nSlow'
)
add.signal(
strategy='luxor',
name='sigCrossover',
arguments=list(
columns=c('nFast', 'nSlow'),
relationship='gt'
),
label='long'
)
add.signal(
strategy='luxor',
name='sigCrossover',
arguments=list(
columns=c('nFast', 'nSlow'),
relationship='lt'
),
label='short'
)
ruleSignal(
sigcol = 'long',
sigval= TRUE,
orderside='long',
ordertype='stoplimit',
prefer='High',
treshold=0.0005,
orderqty = 100000,
replace = FALSE
)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2021-01-01')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2020-12-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2019-12-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2015-12-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2015-12-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2020-01-01')
require(quantstrat)
require('FinancialInstrument')
source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2020-01-01')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2002-10-31')
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2020-01-01', to='2002-10-31')
if (!require("TTR")) {
install.packages("TTR")
library(TTR)
}
if (!require("quantstrat")) {
if(!require("devtools")) {
install.packages("devtools")
require(devtools)
}
install_github("braverock/blotter") # dependency
install_github("braverock/quantstrat")
}
if (!require("IKTrading")){
install_github("IlyaKipnis/IKTrading", force=TRUE)
}
install_github("IlyaKipnis/IKTrading"
install_github("IlyaKipnis/IKTrading")
?IKTrading
library(devtools)
library(quantmod)
library(quantstrat)
library(TTR)
library(png)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(quantmod)
library(quantstrat)
library(TTR)
library(png)
install.packages("foreach")
install.packages("foreach")
library(devtools)
library(quantmod)
library(quantstrat)
library(TTR)
library(png)
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/quantstrat")
rm(list = ls(.blotter), envir = .blotter)
inidate <- '2005-01-01'
.from <- '2005-01-01' #start of backtest
.to <- '2020-01-01' #end of backest
Sys.setenv(TZ= "GMT") #Set up enviroment for timestamps
currency(c('EUR', 'USD'))
exchange_rate(primary_id = 'EURUSD', tick_size = 0.0001)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2020-01-01', adjust= TRUE)
EURUSD = to.minutes30(GBPUSD)
EURUSD = align.time(GBPUSD, 1800)
View(EURUSD)
View(GBPUSD)
head(EURUSD)
getSymbols.FI(Symbols = "EURUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2020-01-01
currency(c('EUR', 'USD'))
exchange_rate(primary_id = 'EURUSD', tick_size = 0.0001)
getSymbols.FI(Symbols = "EURUSD", dir = system.file('extdata', package = 'quantstrat'), from='2015-01-01', to='2020-01-01', adjust= TRUE)
EURUSD = to.minutes30(EURUSD)
EURUSD = align.time(EURUSD, 1800)
getSymbols("USD/EUR",src="oanda")
getSymbols("USD/EUR",src="oanda",from="2005-01-01")
View(GBPUSD)
getSymbols.FI(Symbols = "EURUSD", dir = system.file('extdata', package = 'quantstrat'), from='2000-01-01', to='2010-01-01', adjust= TRUE)
View(data)
head(data)
Sys.setenv(TZ= "GMT") #Set up enviroment for timestamps
currency('EUR')
exchange_rate(data, currency = "EUR", multiplier=1) #tells quantstrat what instruments
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat' #naming srategy, portfolio and account
#removes old portfolio and strategy from enviroment
rm.strat(portfolio.st)
rm.strat(strategy.st)
#initialize portfolio, account, orders and strategy objects
initPortf(portfolio.st, data=data, initDate = inidate, currency = "EUR")
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat' #naming srategy, portfolio and account
#removes old portfolio and strategy from enviroment
rm.strat(portfolio.st)
rm.strat(strategy.st)
#initialize portfolio, account, orders and strategy objects
initPortf(portfolio.st, symbols =data, initDate = inidate, currency = "EUR")
symbols <- data
exchange_rate(symbols, currency = "EUR", multiplier=1) #tells quantstrat what instruments
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols = symbols, initDate = inidate, currency = "EUR")
exchange_rate()
View(EURUSD)
View(EURUSD)
View(GBPUSD)
inidate <- '2002-10-21'
.from <- '2002-10-21' #start of backtest
.to <- '2002-01-31' #end of backest
Sys.setenv(TZ= "GMT") #Set up enviroment for timestamps
currency(c('GBP', 'USD'))
exchange_rate('GBPUSD', tick_size = 0.0001)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from=.from, to=.to)
GBPUSD = to.minutes30(GBPUSD)
GBPUSD = align.time(GBPUSD, 1800)
dim(GBPUSD)
inidate <- '2002-10-21'
.from <- '2002-10-21' #start of backtest
.to <- '2002-10-31' #end of backest
Sys.setenv(TZ= "GMT") #Set up enviroment for timestamps
currency(c('GBP', 'USD'))
exchange_rate('GBPUSD', tick_size = 0.0001)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from=.from, to=.to)
GBPUSD = to.minutes30(GBPUSD)
GBPUSD = align.time(GBPUSD, 1800)
dim(GBPUSD)
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat' #naming srategy, portfolio and account
#removes old portfolio and strategy from enviroment
rm.strat(portfolio.st)
rm.strat(strategy.st)
#initialize portfolio, account, orders and strategy objects
initPortf(portfolio.st, symbols = Symbols, initDate = inidate, currency = currency)
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat' #naming srategy, portfolio and account
#removes old portfolio and strategy from enviroment
rm.strat(portfolio.st)
rm.strat(strategy.st)
#initialize portfolio, account, orders and strategy objects
initPortf(portfolio.st, symbols = exchange_rate, initDate = inidate, currency = currency)
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat' #naming srategy, portfolio and account
#removes old portfolio and strategy from enviroment
rm.strat(portfolio.st)
rm.strat(strategy.st)
#initialize portfolio, account, orders and strategy objects
initPortf(portfolio.st, symbols = GBPUSD, initDate = inidate, currency = currency)
symbols
View(symbols)
View(symbols)
View(Volume)
View(symbols)
View(trade)
View(USDEUR)
rm(list = ls(.blotter), envir = .blotter)
inidate <- '2002-10-21'
.from <- '2002-10-21' #start of backtest
.to <- '2002-10-31' #end of backest
Sys.setenv(TZ= "GMT") #Set up enviroment for timestamps
currency(c('GBP', 'USD'))
exchange_rate('GBPUSD', tick_size = 0.0001)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from=.from, to=.to)
GBPUSD = to.minutes30(GBPUSD)
GBPUSD = align.time(GBPUSD, 1800)
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat' #naming srategy, portfolio and account
#removes old portfolio and strategy from enviroment
rm.strat(portfolio.st)
rm.strat(strategy.st)
#initialize portfolio, account, orders and strategy objects
initPortf(portfolio.st, symbols = GBPUSD, initDate = inidate, currency = currency)
View(GBPUSD)
install.packages("devtools") # if not installed
install.packages("FinancialInstrument") #if not installed
install.packages("PerformanceAnalytics") #if not installed
# next install blotter from GitHub
devtools::install_github("braverock/blotter")
# next install quantstrat from GitHub
devtools::install_github("braverock/quantstrat")
install.packages("FinancialInstrument")
install.packages("PerformanceAnalytics")
require(quantstrat)
require('FinancialInstrument')
source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))
library(devtools)
library(quantmod)
library(quantstrat)
library(TTR)
library(png)
rm(list = ls(.blotter), envir = .blotter)
.blotter
install_github("braverock/blotter") # dependency
install_github("braverock/quantstrat")
install.packages("githubinstall")
install_github("braverock/blotter") # dependency
install_github("braverock/quantstrat")
library(quantstrat)
require(quantstrat)
require('FinancialInstrument')
source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))
library(devtools)
library(quantmod)
library(quantstrat)
library(TTR)
library(png)
rm(list = ls(.blotter), envir = .blotter)
if (!require("TTR")) {
install.packages("TTR")
library(TTR)
}
if (!require("quantstrat")) {
if(!require("devtools")) {
install.packages("devtools")
require(devtools)
}
install_github("braverock/blotter") # dependency
install_github("braverock/quantstrat")
}
if (!require("IKTrading")){
install_github("IlyaKipnis/IKTrading", force=TRUE)
}
library(devtools)
library(quantmod)
library(quantstrat)
library(TTR)
library(png)
rm(list = ls(.blotter), envir = .blotter)
rm(list = ls(.blotter), envir = .blotter)
rm(list = ls('.blotter'), envir = .blotter)
rm(list = ls('.blotter'), envir = '.blotter')
inidate <- '2002-10-21'
.from <- '2002-10-21' #start of backtest
.to <- '2002-10-31' #end of backest
Sys.setenv(TZ= "GMT") #Set up enviroment for timestamps
currency(c('GBP', 'USD'))
exchange_rate('GBPUSD', tick_size = 0.0001)
getSymbols.FI(Symbols = "GBPUSD", dir = system.file('extdata', package = 'quantstrat'), from=.from, to=.to)
GBPUSD = to.minutes30(GBPUSD)
GBPUSD = align.time(GBPUSD, 1800)
tradesize <- 10000 #default trade size
initeq <- 100000 #default initial equity in our porfolio
strategy.st <- portfolio.st <- account.st <- 'firsttrat'
rm.strat(portfolio.st)
rm.strat(strategy.st)
rm.strat(portfolio.st)
rm.strat(strategy.st)
if (!require("quantstrat")) {
if(!require("devtools")) {
install.packages("devtools")
require(devtools)
}
install_github("braverock/blotter") # dependency
install_github("braverock/quantstrat")
}
library(devtools)
rm(list = ls(.blotter), envir = .blotter)
devtools::install_github("hadley/devtools")
install.packages("devtools")
library(devtools)
# Install from github directly
install_github("braverock/blotter")
install_github("braverock/quanstrat")
library(blotter)
library(quantstrat)
rm(list = ls(.blotter), envir = .blotter)
rm.strat(portfolio.st)
rm.strat(strategy.st)
currency("USD")
.blotter <-new.env()
.strategy <-new.env()
strategy.st <- "SMA"
portfolio.st <- "SMA"
account.st <- "SMA"
rm.strat(strategy.st)
initPortf(portfolio.st, symbols)
initAcct(account.st, portfolios=portfolio.st,
initEq = initEq)
initOrders(portfolio.st)
strategy(strategy.st, store=TRUE)
